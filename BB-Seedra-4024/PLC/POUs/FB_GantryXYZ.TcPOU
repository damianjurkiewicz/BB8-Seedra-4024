<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_GantryXYZ" Id="{474e1990-f731-0ed9-052c-42626742a38f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GantryXYZ EXTENDS FB_PackML_BaseModule 
VAR
    // Sub module definitions here

    // List of sub modules
    ipSubModules_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_SUBMODULES] OF I_PackML_BaseModule := [];

    // Component definitions here
    AxisX       		: FB_Component_BasicAxis 		:= (Name := 'AxisX');
    AxisY    			: FB_Component_BasicAxis 		:= (Name := 'AxisY');
	AxisZ				: FB_Component_BasicAxis		:= (Name := 'AxisZ');
    GantryCylinder		: FB_GantryXYCylinder			:= (Name := 'Cylinder');
    //Alarms for this module
    GantryAlarms : ARRAY[1..GANTRY_ALARM_COUNT] OF FB_TcAlarm;

	//IO
	LimitSwitchX :BOOL;
	LimitSwitchY :BOOL;
	LimitSwitchZ :BOOL;

	HomeComplete :BOOL;
	
	//resets
	_HomingStepX : INT;
 	_HomingStepY : INT;

END_VAR

VAR CONSTANT
    GANTRY_ALARM_COUNT : INT := 5;
END_VAR


  // Prywatna zmienna do przechowywania wartości Step

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="MyMethods" Id="{d166ca9d-f57a-4d88-ac90-142e5eb5d488}" />
    <Folder Name="States" Id="{8df42c9b-c051-49f1-9767-900503632339}" />
    <Method Name="Aborting" Id="{5476dfef-6652-4e6b-8928-3724a50553de}" FolderPath="States\">
      <Declaration><![CDATA[
METHOD PROTECTED Aborting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
    0:
        NoStateTasksToComplete := FALSE;
        SequenceState          := SequenceState + 10;
    10:
		AxisX.Disable();
		AxisZ.Disable();
		AxisY.Disable();
		THIS^.HomingStepY := 0;
		SequenceState := SequenceState + 10;
	20:

		StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing" Id="{9be5800b-bdc3-471f-9b7d-42ef121d5c77}" FolderPath="States\">
      <Declaration><![CDATA[METHOD PROTECTED Clearing
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

VAR_INST
	//SoEResetAxis1 : FB_SoEReset;
	//ResetAxis1 :	MC_Reset;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE SequenceState OF
    0:
        NoStateTasksToComplete := FALSE;
        SequenceState          := SequenceState + 10;
    10:
		//Reset any alarms that get latched
//		GantryAlarms[E_Gantry.AlarmMessage].Clear(0,0);		
//		GantryAlarms[E_Gantry.InfoMessage].Clear(0,0);
//		GantryAlarms[E_Gantry.InitReferenceEvent].Clear(0,0);
//		GantryAlarms[E_Gantry.StartTimeout].Clear(0,0);
//		GantryAlarms[E_Gantry.WarnMessage].Clear(0,0);
		AxisX.Reset();
		AxisY.Reset();
		AxisZ.Reset();

		SequenceState := SequenceState + 10;
	20:
	
		SequenceState := SequenceState + 10;
	30: 

		IF ResetSafety() THEN
			SequenceState := SequenceState + 10;		
		END_IF	
    40:

        // Enable here
		// AxisX.Enable();
		// AxisY.Enable();
		// AxisZ.Enable();

        // Check enabled here
		// IF AxisX.Enabled AND AxisY.Enabled AND AxisZ.Enabled THEN
			// SequenceState := SequenceState + 10;
		// END_IF
		
		SequenceState := SequenceState + 10;
		
    50:
        StateTasksComplete := TRUE;
		
END_CASE

SUPER^.Clearing();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{40e5a283-7f33-033f-0879-cc11ecabc43d}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := GantryAlarms,
                         ClassSize  := SIZEOF(TC_EVENTS.Gantry),
                         pInitEvent := ADR(TC_EVENTS.Gantry.InitReferenceEvent),
                         Prefix     := _Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cutting" Id="{391386b3-3ac4-4fc7-a2a1-1d79f5676796}" FolderPath="MyMethods\">
      <Declaration><![CDATA[METHOD Cutting : BOOL

VAR_INST
	Step : INT ;	
END_VAR



(*
	F			H
	|			|
D---+-----------+---C
	|			|
	|			| 
B---+-----------+---A
	|			|
	E			G
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _HomingStepY OF
	0:
		Cutting := FALSE;
		Trace('Start Cutting Box Five Sides');

		IF AxisZ.Enable() THEN
			Trace('Enable');
			_HomingStepY := _HomingStepY + 10;
		END_IF

	10:
		IF AxisZ.Enabled THEN
			Trace('ENABLED');
			_HomingStepY := _HomingStepY + 10;
		END_IF

	20:
		IF AxisZ.MoveVelocity(-2, FALSE) THEN
			Trace('Moving');
			_HomingStepY := 30;
		END_IF

	30:
		Cutting := TRUE;
		_HomingStepY := 0;
		Trace('Box Five Sides is Cut');
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{0cfbfa67-40d6-05d6-0515-ef1c50353a78}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

//Set the current alarm severity for this module
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := GantryAlarms, CurrentSeverity := _CurrentAlarmSeverity);

//Simulate Alarm Messaging
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{895d1ef9-5e85-47dd-a8bf-b32885837641}" FolderPath="States\">
      <Declaration><![CDATA[METHOD PROTECTED Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF

	//=================================PRODUCTION MODE==================================
	E_PMLUnitMode.ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				
				IF Cutting() THEN
					SequenceState := SequenceState + 10;
				END_IF		
				
			10:		
				StateTasksComplete := TRUE;
				StateComplete();
			END_CASE

	//=================================MAINTENANCE & MANUAL MODE==================================
	E_PMLUnitMode.ePMLUnitMode_Maintenance, E_PMLUnitMode.ePMLUnitMode_Manual:
		;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{a7a517c4-9176-4ef6-9045-d889c05c8a21}">
      <Declaration><![CDATA[METHOD PROTECTED HMIPermissions

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//General Mode Based Monitoring and handling of HMI control
CASE _CurrentMode OF
   
 E_PMLUnitMode.ePMLUnitMode_Production:
        CASE _CurrentState OF
            E_PMLState.ePMLState_Stopped:
				AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Idle:
				AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Suspended:
         		AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Execute:
            	AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Aborted:
                AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Held:
                AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Complete:
          		AllowHMIControl(ThisModuleOnly := FALSE); 
        END_CASE
		
    E_PMLUnitMode.ePMLUnitMode_Manual:
        AllowHMIControl(ThisModuleOnly := FALSE); 
	E_PMLUnitMode.ePMLUnitMode_Maintenance:
        AllowHMIControl(ThisModuleOnly := FALSE); 
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomingStepX" Id="{bb0ed88a-091c-4bab-9e01-a967ca1fc9bb}">
      <Declaration><![CDATA[PROPERTY PUBLIC HomingStepX : INT]]></Declaration>
      <Get Name="Get" Id="{190b2c1a-84a4-4b9a-b82b-d034c6e97b13}">
        <Declaration><![CDATA[
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomingStepX := _HomingStepX;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9c9687a4-cd61-4104-a02f-3fe4715cd2fa}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ IF HomingStepX < 0 THEN
	_HomingStepX := 0;  // Blokada wartości ujemnych
	ELSE
	_HomingStepX := HomingStepX;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="HomingStepY" Id="{b85ccf6c-14f7-4091-9161-3a64d81c6f71}">
      <Declaration><![CDATA[PROPERTY PUBLIC HomingStepY : INT]]></Declaration>
      <Get Name="Get" Id="{c9fc6e3e-e251-4188-a708-1d897bfbe015}">
        <Declaration><![CDATA[
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomingStepY := _HomingStepY;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{51c79bd9-40f7-4370-9e3f-edffa2a24928}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ IF HomingStepY < 0 THEN
	_HomingStepY := 0;  // Blokada wartości ujemnych
	ELSE
	_HomingStepY := HomingStepY;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HomingX" Id="{3a7dd60d-4e3b-4739-b0ec-f4ab527c9236}" FolderPath="MyMethods\">
      <Declaration><![CDATA[METHOD HomingX : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _HomingStepX OF
		
	0:
		HomingX := FALSE;
		IF AxisX.Enable() THEN
			Trace('Enable');
			_HomingStepX := _HomingStepX + 10;
		END_IF
		
	10:
		IF AxisX.Enabled THEN
			Trace('ENABLED');
			_HomingStepX := _HomingStepX + 10;
		END_IF

	20:
		IF IO.ProximitySensorX THEN
			IF AxisX.Stop() THEN
				IF NOT AxisX.Busy THEN
				AxisX.Home();
				Trace('Jestem już na krancowce');
				_HomingStepX := 80;
				END_IF
			END_IF
		ELSE		
			_HomingStepX := _HomingStepX + 10;
		END_IF
		
	30:
		IF AxisX.MoveVelocity(-10, FALSE) THEN
			Trace('Szybki ruch, szukam krancowki');
            _HomingStepX := _HomingStepX + 10;
        END_IF
		
	
	40: 
		IF IO.ProximitySensorX THEN
			
		IF AxisX.Stop() THEN
			IF NOT AxisX.Busy THEN
				Trace('Znalazłem krańcówkę');
				_HomingStepX := _HomingStepX + 10;
			END_IF
		END_IF

		END_IF

	50:
		IF AxisX.MoveRelative(5,FALSE) THEN
			Trace('Odsunięcie od krańcówki, po szybkim');
			_HomingStepX := _HomingStepX + 10;
		END_IF
		
	60: 
		IF AxisX.MoveVelocity(-5,FALSE) THEN
			Trace('Spokojny powrot dla precyzji');		
			_HomingStepX := _HomingStepX + 10;
		END_IF	
		
	70:
		IF IO.ProximitySensorX THEN
			IF AxisX.Stop() THEN
				Trace('Zatrzymuje sie');
				_HomingStepX := _HomingStepX + 10; // Przechodzimy do czekania na zatrzymanie
			END_IF
		END_IF

	80:
		IF NOT AxisX.Busy THEN
			IF AxisX.Home() THEN
				_HomingStepX := _HomingStepX + 10;
				Trace('Precyzyjny Home wykonany');
			END_IF
		END_IF


	90:	
		IF AxisX.MoveRelative(2.0, FALSE) THEN
			Trace('Odsunięcie od krańcówki o 2mm');
			_HomingStepX := _HomingStepX + 10;
		END_IF
	
	100:
		IF NOT AxisX.Busy THEN
			IF AxisX.Home() THEN
				Trace('Ustawienie nowego zera po odsunięciu');
				_HomingStepX := _HomingStepX + 10;
			END_IF
		END_IF
	
	110:
		HomingX := TRUE;
		Trace('Homing zakończony pomyślnie');
		_HomingStepX := 0;
			
	END_CASE
	

]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomingY" Id="{7cf726af-0fa2-4719-9f55-f55ebcdc06af}" FolderPath="MyMethods\">
      <Declaration><![CDATA[METHOD HomingY : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _HomingStepY OF
		
	0:
		HomingY := FALSE;
		IF AxisY.Enable() THEN
			Trace('Enable');
			_HomingStepY := _HomingStepY + 10;
		END_IF
		
	10:
		IF AxisY.Enabled THEN
			Trace('ENABLED');
			_HomingStepY := _HomingStepY + 10;
		END_IF

	20:
		IF IO.ProximitySensorY THEN
			IF AxisY.Stop() THEN
				IF NOT AxisY.Busy THEN
				AxisY.Home();
				Trace('Jestem już na krancowce');
				_HomingStepY := 80;
				END_IF
			END_IF
		ELSE		
			_HomingStepY := _HomingStepY + 10;
		END_IF
		
	30:
		IF AxisY.MoveVelocity(-10, FALSE) THEN
			Trace('Szybki ruch, szukam krancowki');
            _HomingStepY := _HomingStepY + 10;
        END_IF
		
	
	40: 
		IF IO.ProximitySensorY THEN
			
		IF AxisY.Stop() THEN
			IF NOT AxisY.Busy THEN
				Trace('Znalazłem krańcówkę');
				_HomingStepY := _HomingStepY + 10;
			END_IF
		END_IF

		END_IF

	50:
		IF AxisY.MoveRelative(5,FALSE) THEN
			Trace('Odsunięcie od krańcówki, po szybkim');
			_HomingStepY := _HomingStepY + 10;
		END_IF
		
	60: 
		IF AxisY.MoveVelocity(-5,FALSE) THEN
			Trace('Spokojny powrot dla precyzji');		
			_HomingStepY := _HomingStepY + 10;
		END_IF	
		
	70:
		IF IO.ProximitySensorY THEN
			IF AxisY.Stop() THEN
				Trace('Zatrzymuje sie');
				_HomingStepY := _HomingStepY + 10; // Przechodzimy do czekania na zatrzymanie
			END_IF
		END_IF

	80:
		IF NOT AxisY.Busy THEN
			IF AxisY.Home() THEN
				_HomingStepY := _HomingStepY + 10;
				Trace('Precyzyjny Home wykonany');
			END_IF
		END_IF


	90:	
		IF AxisY.MoveRelative(2.0, FALSE) THEN
			Trace('Odsunięcie od krańcówki o 2mm');
			_HomingStepY := _HomingStepY + 10;
		END_IF
	
	100:
		IF NOT AxisY.Busy THEN
			IF AxisY.Home() THEN
				Trace('Ustawienie nowego zera po odsunięciu');
				_HomingStepY := _HomingStepY + 10;
			END_IF
		END_IF
	
	110:
		HomingY := TRUE;
		Trace('Homing zakończony pomyślnie');
		_HomingStepY := 0;
			
	END_CASE
	

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{ba85f303-ffbe-03ad-229b-3741bd93e6e2}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
    i                        : UDINT;
    varInfo                  : __SYSTEM.VAR_INFO;
    AllSubUnitsInitialized   : BOOL := TRUE;
    AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterComponent(AxisX);
		RegisterComponent(AxisY);	
		RegisterComponent(AxisZ);	
		RegisterComponent(GantryCylinder);
		
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetSafety" Id="{6bac4035-16f4-4bf2-95a7-9f0b204a82b7}" FolderPath="MyMethods\">
      <Declaration><![CDATA[METHOD ResetSafety : BOOL
VAR_INST
	Step : INT ;	
	SafetyTimer :TON;
	SafetyTimerTrigger :R_TRIG;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//auto resetting timer, a start condition is an end condition
SafetyTimer(IN:= _HomingStepY > 0 AND NOT SafetyTimer.Q, PT:= T#500MS);

CASE _HomingStepY OF
		
		0:  // Reset group or waits
			ResetSafety:= FALSE;
			Trace('Timer Initialize');
			_HomingStepY := _HomingStepY + 10;
			
		10: //If necessary reset group
		
			GVL_Safety.ErrorAck := (GVL_Safety.ComError OR GVL_Safety.FBError); 
		
			IF GVL_Safety.ErrorAck OR SafetyTimer.Q THEN 
				_HomingStepY := _HomingStepY + 10;
			END_IF

		20: //Wait for the signal propagation
			IF SafetyTimer.Q THEN
				GVL_Safety.ErrorAck := FALSE;
				_HomingStepY := _HomingStepY + 10;
			END_IF
		
		30: //Check FB errors
			IF GVL_Safety.FBError OR (NOT GVL_Safety.SafetyPermission) THEN
				GVL_Safety.RestartFBs := TRUE;
			END_IF
			
			_HomingStepY := _HomingStepY + 10;
			
		40: //Wait for the signal propagation
		
			IF SafetyTimer.Q THEN
				GVL_Safety.RestartFBs := FALSE;
				_HomingStepY := _HomingStepY + 10;
			END_IF	
			
		50: //Wait for the signal propagation
			
			
		IF SafetyTimer.Q THEN
				
			
				IF GVL_Safety.SafetyPermission AND 
					NOT (GVL_Safety.ComError OR GVL_Safety.FBError OR GVL_Safety.SafeError) 
				
					THEN
						_HomingStepY := 0;
						ResetSafety := TRUE;
					ELSE
						_HomingStepY := 0;
						ResetSafety := FALSE;
				END_IF
			
			END_IF
		
		ELSE
		
		_HomingStepY := 0;	

END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{e7a01217-de28-430f-aeef-f83d9f1b6f0d}" FolderPath="States\">
      <Declaration><![CDATA[METHOD PROTECTED Resetting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF

	//=================================PRODUCTION MODE==================================
	E_PMLUnitMode.ePMLUnitMode_Production:
		CASE SequenceState OF
			0:
				NoStateTasksToComplete := FALSE;
				SequenceState := SequenceState + 10;	
		
			10:	
				IF  HomingY() THEN
					SequenceState := SequenceState + 10;	
				END_IF		
				
			20:
				IF  HomingX() THEN
					SequenceState := SequenceState + 10;	
				END_IF		
	
			30:		
				StateTasksComplete := TRUE;
				SUPER^.Resetting();
		END_CASE

	//=================================MAINTENANCE & MANUAL MODE==================================
	E_PMLUnitMode.ePMLUnitMode_Maintenance, E_PMLUnitMode.ePMLUnitMode_Manual:
		;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_GantryXYZ">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Aborting">
      <LineId Id="105" Count="14" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Clearing">
      <LineId Id="28" Count="5" />
      <LineId Id="78" Count="0" />
      <LineId Id="83" Count="3" />
      <LineId Id="75" Count="2" />
      <LineId Id="130" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="142" Count="3" />
      <LineId Id="65" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="40" Count="4" />
      <LineId Id="66" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.CreateEvents">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Cutting">
      <LineId Id="503" Count="26" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.CyclicLogic">
      <LineId Id="3" Count="5" />
      <LineId Id="12" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Execute">
      <LineId Id="24" Count="8" />
      <LineId Id="49" Count="0" />
      <LineId Id="36" Count="3" />
      <LineId Id="52" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="3" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HMIPermissions">
      <LineId Id="6" Count="24" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingStepX.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingStepX.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingStepY.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingStepY.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingX">
      <LineId Id="788" Count="97" />
      <LineId Id="314" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.HomingY">
      <LineId Id="688" Count="97" />
      <LineId Id="314" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Initialize">
      <LineId Id="3" Count="4" />
      <LineId Id="68" Count="0" />
      <LineId Id="8" Count="5" />
      <LineId Id="41" Count="5" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.ResetSafety">
      <LineId Id="189" Count="62" />
      <LineId Id="111" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXYZ.Resetting">
      <LineId Id="82" Count="5" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="122" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="129" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="94" Count="9" />
      <LineId Id="27" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>